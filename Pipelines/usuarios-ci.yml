name: CI-$(Build.SourceBranchName)-$(Build.BuildId)

trigger:
  branches:
    include: [develop, release/*, main]

pr:
  branches:
    include: [feature/*]

variables:
  dockerRegistryServiceConnection: 'fcgcr-connection'
  imageRepository: 'fcgcr-repo'
  containerRegistry: 'fcgcr.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Usuarios.Api/Dockerfile'
  buildContext: '$(Build.SourcesDirectory)'
  vmImageName: 'ubuntu-latest'
  hadolintVersion: 'v2.12.0'

stages:

- stage: Qualidade
  displayName: Verificação de Qualidade
  jobs:
    - job: TestesELint
      displayName: Testes Unitários + Hadolint
      pool:
        vmImage: $(vmImageName)
      steps:
        - checkout: self
          displayName: Fazer checkout do código

        - task: DotNetCoreCLI@2
          displayName: Rodar testes com .NET
          inputs:
            command: test
            projects: '**/Usuarios.Api.Tests.csproj'

        - script: |
            echo "Executando Hadolint versão $(hadolintVersion)..."
            curl -sSL https://github.com/hadolint/hadolint/releases/download/$(hadolintVersion)/hadolint-Linux-x86_64 -o hadolint
            chmod +x hadolint
            ./hadolint $(dockerfilePath)
          displayName: Validar Dockerfile com Hadolint

- stage: BuildDocker
  displayName: Buildar e Publicar Imagem Docker
  dependsOn: Qualidade
  jobs:
    - job: BuildarImagem
      displayName: Buildar imagem e disparar CD
      pool:
        vmImage: $(vmImageName)
      steps:
        - checkout: self
          displayName: Fazer checkout do código

        - script: |
            RAW_BRANCH="$(Build.SourceBranch)"
            BRANCH=$(echo "$RAW_BRANCH" | sed 's#refs/heads/##')
            SHORT_SHA=$(echo "$(Build.SourceVersion)" | cut -c1-7)

            if [[ "$BRANCH" == "develop" ]]; then
              TAG_PREFIX="Development"
            elif [[ "$BRANCH" =~ ^release\/.* ]]; then
              TAG_PREFIX="Staging"
            elif [[ "$BRANCH" == "main" ]]; then
              TAG_PREFIX="Production"
            else
              echo "Branch '$BRANCH' não se qualifica para build."
              exit 0
            fi

            echo "##vso[task.setvariable variable=latestTag]Usuarios-${TAG_PREFIX}-latest"
            echo "##vso[task.setvariable variable=shaTag]Usuarios-${TAG_PREFIX}-${SHORT_SHA}"
            echo "##vso[task.setvariable variable=tagPrefix]${TAG_PREFIX}"
          displayName: Definir tags da imagem

        - task: Docker@2
          displayName: Buildar e enviar imagem para ACR
          inputs:
            command: buildAndPush
            containerRegistry: $(dockerRegistryServiceConnection)
            repository: $(imageRepository)
            dockerfile: $(dockerfilePath)
            buildContext: $(buildContext)
            tags: |
              $(latestTag)
              $(shaTag)
            buildArguments: |
              TAG_PREFIX=$(tagPrefix)
            disableTelemetry: true

        - script: docker logout $(containerRegistry)
          displayName: Finalizar sessão Docker

        - script: |
            echo "Disparando pipeline CD para Desenvolvimento com tag $(latestTag)"
            curl -s -X POST \
              -H "Authorization: Bearer $TriggerPAT" \
              -H "Content-Type: application/json" \
              --data '{"resources":{"repositories":{"self":{"refName":"'"$(Build.SourceBranch)"'"}}},"templateParameters":{"imageTag":"'"$(latestTag)"'"}}' \
              https://dev.azure.com/marciohenrique-fiap/FCG/_apis/pipelines/53/runs?api-version=7.1-preview.1
          displayName: Disparar Pipeline CD - Desenvolvimento
          condition: and(succeeded(), eq(variables['tagPrefix'], 'Development'))
          env:
            TriggerPAT: $(TriggerPAT)

        - script: |
            echo "Disparando pipeline CD para Staging com tag $(latestTag)"
            curl -s -X POST \
              -H "Authorization: Bearer $TriggerPAT" \
              -H "Content-Type: application/json" \
              --data '{"resources":{"repositories":{"self":{"refName":"'"$(Build.SourceBranch)"'"}}},"templateParameters":{"imageTag":"'"$(latestTag)"'"}}' \
              https://dev.azure.com/marciohenrique-fiap/FCG/_apis/pipelines/54/runs?api-version=7.1-preview.1
          displayName: Disparar Pipeline CD - Staging
          condition: and(succeeded(), eq(variables['tagPrefix'], 'Staging'))
          env:
            TriggerPAT: $(TriggerPAT)

        - script: |
            echo "Disparando pipeline CD para Produção com tag $(latestTag)"
            curl -s -X POST \
              -H "Authorization: Bearer $TriggerPAT" \
              -H "Content-Type: application/json" \
              --data '{"resources":{"repositories":{"self":{"refName":"'"$(Build.SourceBranch)"'"}}},"templateParameters":{"imageTag":"'"$(latestTag)"'"}}' \
              https://dev.azure.com/marciohenrique-fiap/FCG/_apis/pipelines/55/runs?api-version=7.1-preview.1
          displayName: Disparar Pipeline CD - Produção
          condition: and(succeeded(), eq(variables['tagPrefix'], 'Production'))
          env:
            TriggerPAT: $(TriggerPAT)